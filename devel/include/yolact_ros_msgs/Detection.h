// Generated by gencpp from file yolact_ros_msgs/Detection.msg
// DO NOT EDIT!


#ifndef YOLACT_ROS_MSGS_MESSAGE_DETECTION_H
#define YOLACT_ROS_MSGS_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolact_ros_msgs
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : class_name()
    , score(0.0)
    , distance(0.0)  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : class_name(_alloc)
    , score(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef double _score_type;
  _score_type score;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::yolact_ros_msgs::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolact_ros_msgs::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::yolact_ros_msgs::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::yolact_ros_msgs::Detection > DetectionPtr;
typedef boost::shared_ptr< ::yolact_ros_msgs::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolact_ros_msgs::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolact_ros_msgs::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolact_ros_msgs::Detection_<ContainerAllocator1> & lhs, const ::yolact_ros_msgs::Detection_<ContainerAllocator2> & rhs)
{
  return lhs.class_name == rhs.class_name &&
    lhs.score == rhs.score &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolact_ros_msgs::Detection_<ContainerAllocator1> & lhs, const ::yolact_ros_msgs::Detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolact_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yolact_ros_msgs::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolact_ros_msgs::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolact_ros_msgs::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolact_ros_msgs::Detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolact_ros_msgs::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolact_ros_msgs::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolact_ros_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2e65e978f7598a9c2ca76aa34cae48f";
  }

  static const char* value(const ::yolact_ros_msgs::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2e65e978f7598a9ULL;
  static const uint64_t static_value2 = 0xc2ca76aa34cae48fULL;
};

template<class ContainerAllocator>
struct DataType< ::yolact_ros_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolact_ros_msgs/Detection";
  }

  static const char* value(const ::yolact_ros_msgs::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolact_ros_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string class_name\n"
"float64 score\n"
"float32 distance\n"
;
  }

  static const char* value(const ::yolact_ros_msgs::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolact_ros_msgs::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_name);
      stream.next(m.score);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolact_ros_msgs::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolact_ros_msgs::Detection_<ContainerAllocator>& v)
  {
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLACT_ROS_MSGS_MESSAGE_DETECTION_H
